// <copyright file="clsPair.cs" company="Fouroaks">
// Copyright (c) 2007, 2008 All Right Reserved, http://www.fouroaks.nl/
//
// This source is subject to the Microsoft Permissive License.
// Please see the License.txt file for more information.
// All other rights reserved.
//
// THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY 
// KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// </copyright>
// <author>Peter Knijff</author>
// <email>peter.knijff@fouroaks.nl</email>
// <date>2006-2010</date>
//
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace QICTWin
{
    public class clsPair
    {
        int[] aiPair;
        public int[] iCompact;
        public int[] aiDistributed;
        public bool bUsed = true;
        public List<int> resultIds = new List<int>();

        public int[] Pair
        {
            get
            {
                return aiPair;
            }
        }
        public int[] clonedPair
        {
            get
            {
                int[] aiPairRet = new int[aiPair.Length];
                for (int iCnt = 0; iCnt < aiPair.Length; iCnt++)
                    aiPairRet[iCnt] = aiPair[iCnt];
                return aiPairRet;
            }
        }

        public int this[int index]
        {
            get
            {
                return aiPair[index];
            }
        }

        public clsPair(params int[] pArray)
        {
            this.aiPair = new int[pArray.Length];
            for (int iCnt = 0; iCnt < pArray.Length; iCnt++)
                this.aiPair[iCnt] = pArray[iCnt];
        }

        public void appendPos(int iPos)
        {
            List<int> lstTmp = new List<int>(aiPair);
            lstTmp.Insert(0, iPos);
            aiPair = lstTmp.ToArray();
        }
        internal void prepareSelection(clsUserTestSet cUserTestSet)
        {
            iCompact = clonedPair;
            aiDistributed = new int[cUserTestSet.nrParameters];

            // set default -1 (not in compact)
            for (int i = 0; i < cUserTestSet.nrParameters; i++)
                aiDistributed[i] = -1;

            try
            {
                int iLast = 0;
                for (int i = 0; i < iCompact.Length; i++)
                {
                    int iVal = iCompact[i];
                    for (int j = iLast; j < cUserTestSet.nrParameters; j++)
                    {
                        clsParam cUserParameter = cUserTestSet[j];
                        if (cUserParameter.StartUserVlaue <= iVal && iVal <= cUserParameter.EndUserVlaue)
                        {
                            iLast = j + 1;
                            aiDistributed[j] = iVal;
                            break;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
            }
        }
        /// <summary>Tests if this pair is in the testset bij checking the distributed array
        /// </summary>
        /// <param name="iTestset">The testset which has been generated by the clsPairwise class</param>
        /// <returns>true if pair is part of this testset; else false</returns>
        public bool IN(int[] iTestset)
        {
            // test all values in aiDistributed array
            for (int i = 0; i < aiDistributed.Length; i++)
            {
                if (aiDistributed[i] == -1)
                    // this parameter is not part of this pair so ignore
                    continue;
                if (iTestset[i] != aiDistributed[i])
                    // this parameter makes the test invalid
                    return false;
            }
            // all paramaters of this pair matches the testset
            return true;
        }

        public override string ToString()
        {
            string szRet = "";
            for (int iCnt = 0; iCnt < aiPair.Length; iCnt++)
                szRet += ", " + aiPair[iCnt];
            return szRet.Substring(2); ;
        }

        /// <summary>Constructs a string with user information: 'name', ['name', ]
        /// </summary>
        /// <returns>The user information string</returns>
        public string ToStringStr(clsUserTestSet cUserTestSet)
        {
            string szRet = "";

            foreach (int iPair in aiPair)
            {
                szRet += ", " + cUserTestSet.getUserValue(iPair).Name;
            }

            if (szRet.Length > 2)
                szRet = szRet.Substring(2);
            return "{"+szRet+"}";
        }

        /// <summary>Constructs a string with user information: 'name' (pos), ['name' (pos), ]
        /// </summary>
        /// <returns>The user information string</returns>
        public string ToStringStrPos(clsUserTestSet cUserTestSet)
        {
            string szRet = "";

            foreach (int iPair in aiPair)
            {
                szRet += ", " + cUserTestSet.getUserValue(iPair).Name + " (" + iPair + ")";
            }

            if (szRet.Length > 2)
                szRet = szRet.Substring(2);
            return "{" + szRet + "}";
        }

    }
}
